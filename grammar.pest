// tokens
alpha = { 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }
plus = { "+" }
minus = { "-" }
mult ={ "*" }
div ={ "/" }
pw = { "^" }
lparen = { "(" }
rparen = { ")" }
underscore = { "_" }
lbracket = { "{" }
rbracket = { "}" }
listsep = { "," }
larray = { "[" }
rarray = { "]" }

// identifiers and constants
identifier = { underscore* ~ alpha+ ~ (alpha | digit)+ }
numeric_constant = { digit+ }

// strings (fucking complicated)
string = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

// types
int8 = {"int8"}
uint8 = {"uint8"}
int16 = {"int16"}
uint16 = {"uint16"}
int32 = {"int32"}
uint32 = {"uint32"}
int64 = {"int64"}
uint64 = {"uint64"}
float32 = {"float32"}
float64 = {"float64"}
macaddress = {"macaddress"}
type_name = { int8 | uint8 | int16 | uint16 | int32 | uint32 | int64 | uint64 | float32 | float64 | macaddress }

// expressions
expr = { sum }
sum = { product ~ ((plus | minus) ~ product)*}
product = { power ~ ((mult | div) ~ power)*}
power = { value ~ (pw ~ power)? }
value = { numeric_constant | identifier | lparen ~ expr ~ rparen }


// packet body
packet_keyword = { "packet" }
packet = { (packet_keyword ~ identifier ~ lbracket ~ rules ~ rbracket)* }
rules = { (rule ~ listsep*)* }
rule = { 
    identifier ~ type_name ~ (larray ~ numeric_constant ~ rarray)*
}