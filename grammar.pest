// whitespace 
WHITESPACE = _{ " " | "\n" | "\r\n" | "\t" }

// tokens
alpha = @{ 'a'..'z' | 'A'..'Z' }
digit = @{ '0'..'9' }
plus = @{ "+" }
minus = @{ "-" }
mult = @{ "*" }
div = @{ "/" }
pw = @{ "^" }
lparen = @{ "(" }
rparen = @{ ")" }
underscore = @{ "_" }
lbracket = @{ "{" }
rbracket = @{ "}" }
listsep = @{ "," }
larray = @{ "[" }
rarray = @{ "]" }
sumof = @ { "sumof" }
productof = @ { "productof" }
assign = @ { "=" }
when = @ { "when" }
then = @ { "then" }
otherwise = @ { "otherwise" }
greater_than = @ { ">" }
greater_than_equal = @ { ">=" }
less_than = @ { "<" }
less_than_equal = @ { "<= "}
equals = @{ "==" }
not_equals = @ { "!=" | "<>" }
and_expr = @{ "and" }
or_expr = @ { "or" }
comma = @ { "," }

// identifiers and constants
identifier = @{ (underscore | alpha){1} ~ (alpha | digit | underscore)* }
numeric_constant = @{ digit+ ~ ("." ~ digit*)? }

// strings (fucking complicated)
string = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

// parameter list (should fix this to terminate with rparen)
parameter_list = { lparen ~ (expr ~ comma*)* ~ rparen }

// intrinsic functions
sqrt = @{"sqrt"}
min = @{"min"}
max = @{"max"}

// types
int8 = @{"int8"}
uint8 = @{"uint8"}
int16 = @{"int16"}
uint16 = @{"uint16"}
int32 = @{"int32"}
uint32 = @{"uint32"}
int64 = @{"int64"}
uint64 = @{"uint64"}
float32 = @{"float32"}
float64 = @{"float64"}
macaddress = @{"macaddress"}
datetime = @{"datetime"}
type_name = @{ int8 | uint8 | int16 | uint16 | int32 | uint32 | int64 | uint64 | float32 | float64 | macaddress | datetime }
intrinsic_function = @{ sqrt | min | max }

// packet keywords
packet_keyword = @{"packet"}
calculated_keyword = @{"calc"}

// expressions
expr = { bool_and_or_expr }
bool_and_or_expr = { bool_comp_expr ~ ((and_expr | or_expr) ~ bool_comp_expr)* }
bool_comp_expr = { sum ~ ((greater_than | greater_than_equal | less_than | less_than_equal | equals | not_equals) ~ sum)* }
sum = { product ~ ((plus | minus) ~ product)* }
product = { power ~ ((mult | div) ~ power)* }
power = { value ~ (pw ~ value)? }
inner_expr = { lparen ~ expr ~ rparen }
value = { guard_expression | numeric_constant | intrinsic_function_clause | aggregate_accessor | direct_value_accessor | inner_expr }
intrinsic_function_clause = { intrinsic_function ~ parameter_list }

// declaring and accessing variables
declaration = { identifier ~ type_name ~ array_specifier? }
direct_value_accessor = { identifier ~ array_specifier? }
aggregate_accessor = { (sumof | productof) ~ identifier ~ !array_specifier }
array_specifier = { larray ~ numeric_constant ~ rarray }

// packet body
packets = { SOI ~ packet+ ~ EOI }
packet = { packet_keyword ~ identifier ~ lbracket ~ rule_list ~ rbracket }
rule_list = { rule ~ (listsep ~ rule)* }
rule = { declaration | calculated_field }
calculated_field = { calculated_keyword ~ identifier ~ type_name ~ assign ~ expr }
guard_expression = { when ~ expr ~ then ~ expr ~ otherwise ~ expr }