#include <stdio.h>
#include <stdlib.h>
#include <memory.h>
#include <time.h>
#include <stdint.h>

typedef struct {{PacketName}}
{
{{#each Sequence}}
    {{get_data_type}} {{Name}};
{{/each}}
} {{PacketName}};

void reverse(uint8_t* arr, size_t arr_size) {
    for (size_t low = 0, high = arr_size - 1; low < high; low++, high--) {
        int temp = arr[low];
        arr[low] = arr[high];
        arr[high] = temp;
    }
}

void deserialize(uint8_t* data, {{PacketName}}** packet, int verbose) {
    size_t packet_counter = 0;
    {{#each Sequence}}

    uint8_t {{SnakeCaseVariableName}}_data[{{Length}}];
    memset({{SnakeCaseVariableName}}_data, 0, {{Length}});
    memcpy(&{{SnakeCaseVariableName}}_data[0], &data[packet_counter], sizeof(uint8_t) * {{Length}});
    reverse({{SnakeCaseVariableName}}_data, {{Length}});
    {{get_data_type}} {{SnakeCaseVariableName}}_typed = {{get_conversion_method}};
    packet_counter += {{Length}};
    {{/each}}

    // build packet
    {{PacketName}}* result = ({{PacketName}}*) malloc(sizeof({{PacketName}}));
    {{#each Sequence}}
    result->{{Name}} = {{SnakeCaseVariableName}}_typed;
    {{/each}}

    if (verbose == 1) {
        {{#each Sequence}}
        printf("{{Name}}: {{get_format_string}}\n", result->{{Name}});
        {{/each}}
    }

    *packet = result;
}


void serialize({{PacketName}}* packet, uint8_t** data, int verbose) {
    uint8_t* result = (uint8_t*) calloc({{TotalLength}}, sizeof(uint8_t));
    memset(result, 0, {{TotalLength}});
    size_t packet_counter = 0;

    {{#each Sequence}}

    {{#equals Type "UnsignedInteger8"}}
    uint8_t {{SnakeCaseVariableName}}_bytes[{{Length}}];
    memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
    memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
    reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
    memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(uint8_t) * {{Length}});
    packet_counter += {{Length}};
    {{/equals}}

    {{#equals Type "UnsignedInteger16"}}
    uint8_t {{SnakeCaseVariableName}}_bytes[{{Length}}];
    memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
    memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
    reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
    memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(uint8_t) * {{Length}});
    packet_counter += {{Length}};
    {{/equals}}


    {{#equals Type "UnsignedInteger32"}}
    uint8_t {{SnakeCaseVariableName}}_bytes[{{Length}}];
    memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
    memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
    reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
    memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(uint8_t) * {{Length}});
    packet_counter += {{Length}};
    {{/equals}}

    {{#equals Type "UnsignedInteger64"}}
    uint8_t {{SnakeCaseVariableName}}_bytes[{{Length}}];
    memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
    memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
    reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
    memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(uint8_t) * {{Length}});
    packet_counter += {{Length}};
    {{/equals}}

    {{#equals Type "Integer8"}}
    uint8_t {{SnakeCaseVariableName}}_bytes[{{Length}}];
    memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
    memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
    reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
    memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(uint8_t) * {{Length}});
    packet_counter += {{Length}};
    {{/equals}}

    {{#equals Type "Integer16"}}
    uint8_t {{SnakeCaseVariableName}}_bytes[{{Length}}];
    memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
    memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
    reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
    memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(uint8_t) * {{Length}});
    packet_counter += {{Length}};
    {{/equals}}


    {{#equals Type "Integer32"}}
    uint8_t {{SnakeCaseVariableName}}_bytes[{{Length}}];
    memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
    memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
    reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
    memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(uint8_t) * {{Length}});
    packet_counter += {{Length}};
    {{/equals}}

    {{#equals Type "Integer64"}}
    uint8_t {{SnakeCaseVariableName}}_bytes[{{Length}}];
    memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
    memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
    reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
    memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(uint8_t) * {{Length}});
    packet_counter += {{Length}};
    {{/equals}}

    {{#equals Type "Float16"}}
    uint8_t {{SnakeCaseVariableName}}_bytes[{{Length}}];
    memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
    memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
    reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
    memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(uint8_t) * {{Length}});
    packet_counter += {{Length}};
    {{/equals}}

    {{#equals Type "Float32"}}
    uint8_t {{SnakeCaseVariableName}}_bytes[{{Length}}];
    memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
    memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
    reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
    memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(uint8_t) * {{Length}});
    packet_counter += {{Length}};
    {{/equals}}

    {{#equals Type "Float64"}}
    uint8_t {{SnakeCaseVariableName}}_bytes[{{Length}}];
    memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
    memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
    reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
    memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(uint8_t) * {{Length}});
    packet_counter += {{Length}};
    {{/equals}}

    {{#equals Type "MacAddress"}}
    // not implemented
    {{/equals}}

    {{#equals Type "DateTime"}}
    uint8_t {{SnakeCaseVariableName}}_bytes[{{Length}}];
    memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
    memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
    reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
    memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(uint8_t) * {{Length}});
    packet_counter += {{Length}};
    {{/equals}}

    {{#equals Type "Boolean"}}
    uint8_t {{SnakeCaseVariableName}}_bytes[{{Length}}];
    memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
    memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
    reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
    memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(uint8_t) * {{Length}});
    packet_counter += {{Length}};
    {{/equals}}

    {{/each}}

    if (verbose == 1) {
        {{#each Sequence}}
        printf("{{Name}}: {{get_format_string}}\n", packet->{{Name}});
        {{/each}}
    }

    *data = result;
}

int main() {
    printf("%s", "-- {{PacketName}} Tester --\n\0");

    {{PacketName}} *packet = ({{PacketName}} *) malloc(sizeof({{PacketName}}));

    {{#each Sequence}}
    packet->{{Name}} = NULL; // replace with value of choice
    {{/each}}

    uint8_t* data = (uint8_t*) calloc({{TotalLength}}, sizeof(uint8_t));
    serialize(packet, &data, 1);

    for (size_t i = 0; i < {{TotalLength}}; i++) {
        printf("%02X, ", data[i]);
    }
    printf("\n");

    {{PacketName}} * new_packet;
    deserialize(data, &new_packet, 1);

    return 0;
}
