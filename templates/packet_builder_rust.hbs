pub struct {{PacketName}}
{
    {{#each Sequence}}
    pub {{Name}}: {{get_data_type}},
    {{/each}}
} {{PacketName}};

impl {{PacketName}} {
    pub fn deserialize(data: u8[], verbose: bool) -> {{PacketName}} {
        let packet_counter: usize  = 0;
        {{#each Sequence}}

        let mut {{SnakeCaseVariableName}}_data: [u8; {{Length}}];
        for i in &mut {{SnakeCaseVariableName}}_data { *i = 0 };
        &{{SnakeCaseVariableName}}_data.copy_from_slice(&data[{{StartByte}}..{{EndByte}}]);
        &{{SnakeCaseVariableName}}_data.reverse();
        let {{SnakeCaseVariableName}}_typed: {{get_data_type}}  = {{get_conversion_method}};
        packet_counter += {{Length}};
        {{/each}}

        // build packet
        let result: {{PacketName}} = {
            {{#each Sequence}}
            {{Name}}: {{SnakeCaseVariableName}}_typed;
            {{/each}}
        };

        if verbose {
            {{#each Sequence}}
            println!("{{Name}}: {{get_format_string}}", result.{{Name}});
            {{/each}}
        }

        result
    }

/*
    pub fn serialize(&self, verbose: bool) -> [u8; {{TotalLength}}] {
        u8* result = (u8*) calloc({{TotalLength}}, sizeof(u8));
        memset(result, 0, {{TotalLength}});
        usize packet_counter = 0;

        {{#each Sequence}}

        {{#equals Type "UnsignedInteger8"}}
        u8 {{SnakeCaseVariableName}}_bytes[{{Length}}];
        memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
        memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
        reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
        memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(u8) * {{Length}});
        packet_counter += {{Length}};
        {{/equals}}

        {{#equals Type "UnsignedInteger16"}}
        u8 {{SnakeCaseVariableName}}_bytes[{{Length}}];
        memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
        memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
        reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
        memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(u8) * {{Length}});
        packet_counter += {{Length}};
        {{/equals}}


        {{#equals Type "UnsignedInteger32"}}
        u8 {{SnakeCaseVariableName}}_bytes[{{Length}}];
        memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
        memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
        reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
        memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(u8) * {{Length}});
        packet_counter += {{Length}};
        {{/equals}}

        {{#equals Type "UnsignedInteger64"}}
        u8 {{SnakeCaseVariableName}}_bytes[{{Length}}];
        memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
        memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
        reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
        memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(u8) * {{Length}});
        packet_counter += {{Length}};
        {{/equals}}

        {{#equals Type "Integer8"}}
        u8 {{SnakeCaseVariableName}}_bytes[{{Length}}];
        memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
        memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
        reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
        memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(u8) * {{Length}});
        packet_counter += {{Length}};
        {{/equals}}

        {{#equals Type "Integer16"}}
        u8 {{SnakeCaseVariableName}}_bytes[{{Length}}];
        memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
        memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
        reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
        memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(u8) * {{Length}});
        packet_counter += {{Length}};
        {{/equals}}


        {{#equals Type "Integer32"}}
        u8 {{SnakeCaseVariableName}}_bytes[{{Length}}];
        memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
        memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
        reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
        memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(u8) * {{Length}});
        packet_counter += {{Length}};
        {{/equals}}

        {{#equals Type "Integer64"}}
        u8 {{SnakeCaseVariableName}}_bytes[{{Length}}];
        memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
        memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
        reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
        memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(u8) * {{Length}});
        packet_counter += {{Length}};
        {{/equals}}

        {{#equals Type "Float16"}}
        u8 {{SnakeCaseVariableName}}_bytes[{{Length}}];
        memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
        memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
        reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
        memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(u8) * {{Length}});
        packet_counter += {{Length}};
        {{/equals}}

        {{#equals Type "Float32"}}
        u8 {{SnakeCaseVariableName}}_bytes[{{Length}}];
        memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
        memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
        reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
        memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(u8) * {{Length}});
        packet_counter += {{Length}};
        {{/equals}}

        {{#equals Type "Float64"}}
        u8 {{SnakeCaseVariableName}}_bytes[{{Length}}];
        memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
        memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
        reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
        memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(u8) * {{Length}});
        packet_counter += {{Length}};
        {{/equals}}

        {{#equals Type "MacAddress"}}
        // not implemented
        {{/equals}}

        {{#equals Type "DateTime"}}
        u8 {{SnakeCaseVariableName}}_bytes[{{Length}}];
        memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
        memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
        reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
        memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(u8) * {{Length}});
        packet_counter += {{Length}};
        {{/equals}}

        {{#equals Type "Boolean"}}
        u8 {{SnakeCaseVariableName}}_bytes[{{Length}}];
        memset({{SnakeCaseVariableName}}_bytes, 0, {{Length}});
        memcpy({{SnakeCaseVariableName}}_bytes, &packet->{{Name}}, {{Length}});
        reverse({{SnakeCaseVariableName}}_bytes, {{Length}});
        memcpy(&result[packet_counter], &{{SnakeCaseVariableName}}_bytes[0], sizeof(u8) * {{Length}});
        packet_counter += {{Length}};
        {{/equals}}

        {{/each}}

        if (verbose == 1) {
            {{#each Sequence}}
            printf("{{Name}}: {{get_format_string}}\n", packet->{{Name}});
            {{/each}}
        }

        *data = result;
    }
}

int main() {
    printf("%s", "-- {{PacketName}} Tester --\n\0");

    {{PacketName}} *packet = ({{PacketName}} *) malloc(sizeof({{PacketName}}));

    {{#each Sequence}}
    packet->{{Name}} = NULL; // replace with value of choice
    {{/each}}

    u8* data = (u8*) calloc({{TotalLength}}, sizeof(u8));
    serialize(packet, &data, 1);

    for (usize i = 0; i < {{TotalLength}}; i++) {
        printf("%02X, ", data[i]);
    }
    printf("\n");

    {{PacketName}} * new_packet;
    deserialize(data, &new_packet, 1);

    return 0;
}
*/